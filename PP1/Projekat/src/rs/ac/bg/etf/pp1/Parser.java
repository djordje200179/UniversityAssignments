
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Dec 25 18:10:25 CET 2023
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Mon Dec 25 18:10:25 CET 2023
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\003\011\000\002\002\004\000\002\036" +
    "\003\000\002\004\004\000\002\004\002\000\002\005\012" +
    "\000\002\006\003\000\002\042\003\000\002\007\004\000" +
    "\002\007\002\000\002\010\003\000\002\010\003\000\002" +
    "\011\006\000\002\012\005\000\002\012\003\000\002\013" +
    "\005\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\014\004\000\002\014\002\000\002\015\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\004\000\002" +
    "\021\004\000\002\021\002\000\002\022\004\000\002\022" +
    "\002\000\002\023\012\000\002\037\004\000\002\037\004" +
    "\000\002\024\003\000\002\024\002\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\030\004\000\002" +
    "\030\002\000\002\027\005\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\007\000\002\027\011" +
    "\000\002\027\007\000\002\027\003\000\002\031\004\000" +
    "\002\031\006\000\002\031\005\000\002\031\005\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\047\006\000\002\034\003" +
    "\000\002\034\002\000\002\035\005\000\002\035\003\000" +
    "\002\044\003\000\002\044\005\000\002\044\007\000\002" +
    "\044\003\000\002\044\003\000\002\045\005\000\002\045" +
    "\003\000\002\046\005\000\002\046\003\000\002\046\004" +
    "\000\002\041\003\000\002\041\005\000\002\040\004\000" +
    "\002\020\005\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\025\005\001\002\000\004\002\220\001" +
    "\002\000\004\044\006\001\002\000\012\004\uffff\026\uffff" +
    "\035\uffff\044\uffff\001\002\000\012\004\ufffd\026\ufffd\035" +
    "\ufffd\044\ufffd\001\002\000\012\004\ufff8\026\011\035\ufff8" +
    "\044\ufff8\001\002\000\004\044\210\001\002\000\010\004" +
    "\016\035\015\044\021\001\002\000\012\004\ufffe\026\ufffe" +
    "\035\ufffe\044\ufffe\001\002\000\010\004\ufff9\035\ufff9\044" +
    "\ufff9\001\002\000\004\044\021\001\002\000\010\005\uffe5" +
    "\032\uffe5\044\uffe5\001\002\000\004\044\025\001\002\000" +
    "\010\004\ufff7\035\ufff7\044\ufff7\001\002\000\006\011\ufffa" +
    "\044\ufffa\001\002\000\010\004\ufff6\035\ufff6\044\ufff6\001" +
    "\002\000\006\006\uffea\013\uffea\001\002\000\006\006\032" +
    "\013\031\001\002\000\010\006\uffe7\011\026\013\uffe7\001" +
    "\002\000\004\012\030\001\002\000\006\006\uffe9\013\uffe9" +
    "\001\002\000\010\006\uffe8\010\uffe8\013\uffe8\001\002\000" +
    "\004\044\025\001\002\000\010\004\uffec\035\uffec\044\uffec" +
    "\001\002\000\006\006\uffeb\013\uffeb\001\002\000\010\005" +
    "\036\032\041\044\021\001\002\000\004\044\176\001\002" +
    "\000\004\002\001\001\002\000\004\007\043\001\002\000" +
    "\010\005\uffe6\032\uffe6\044\uffe6\001\002\000\004\044\042" +
    "\001\002\000\004\007\uffe2\001\002\000\006\010\uffe0\044" +
    "\021\001\002\000\006\010\uffe1\013\174\001\002\000\004" +
    "\044\172\001\002\000\004\010\050\001\002\000\006\010" +
    "\uffde\013\uffde\001\002\000\006\004\uffed\044\uffed\001\002" +
    "\000\006\004\052\044\021\001\002\000\020\005\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\037\uffdb\040\uffdb\044\uffdb\001\002" +
    "\000\006\004\uffee\044\uffee\001\002\000\020\005\067\027" +
    "\064\030\055\031\066\037\070\040\065\044\056\001\002" +
    "\000\004\007\166\001\002\000\040\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\164\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\001" +
    "\002\000\012\007\122\022\155\023\156\024\157\001\002" +
    "\000\004\006\154\001\002\000\036\006\uffb6\007\uffb6\010" +
    "\uffb6\011\151\012\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\001\002\000" +
    "\020\005\uffdc\027\uffdc\030\uffdc\031\uffdc\037\uffdc\040\uffdc" +
    "\044\uffdc\001\002\000\020\005\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\037\uffd3\040\uffd3\044\uffd3\001\002\000\004\007\140" +
    "\001\002\000\004\006\137\001\002\000\022\006\102\007" +
    "\105\016\072\036\076\041\073\042\077\043\106\044\056" +
    "\001\002\000\010\005\uffe4\032\uffe4\044\uffe4\001\002\000" +
    "\004\006\071\001\002\000\020\005\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\037\uffd8\040\uffd8\044\uffd8\001\002\000\016\007" +
    "\105\036\076\041\073\042\077\043\106\044\056\001\002" +
    "\000\024\006\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\001\002\000\024\006\uffc4" +
    "\010\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\001\002\000\010\006\135\015\111\016\112" +
    "\001\002\000\004\044\021\001\002\000\024\006\uffef\010" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\001\002\000\026\006\uffc0\007\122\010\uffc0\012" +
    "\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\001\002\000\024\006\uffc1\010\uffc1\012\uffc1\013\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\001\002\000\020" +
    "\005\uffd9\027\uffd9\030\uffd9\031\uffd9\037\uffd9\040\uffd9\044" +
    "\uffd9\001\002\000\024\006\uffbc\010\uffbc\012\uffbc\013\uffbc" +
    "\015\uffbc\016\uffbc\017\117\020\116\021\115\001\002\000" +
    "\024\006\uffbe\010\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\001\002\000\020\007\105\016" +
    "\072\036\076\041\073\042\077\043\106\044\056\001\002" +
    "\000\024\006\ufff0\010\ufff0\012\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\001\002\000\010\010\110" +
    "\015\111\016\112\001\002\000\024\006\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\001\002\000\016\007\uffce\036\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\001\002\000\016\007\uffcd\036\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\001\002\000\016\007\105\036" +
    "\076\041\073\042\077\043\106\044\056\001\002\000\024" +
    "\006\uffbd\010\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017" +
    "\117\020\116\021\115\001\002\000\016\007\uffca\036\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\001\002\000\016\007" +
    "\uffcb\036\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002" +
    "\000\016\007\uffcc\036\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\001\002\000\016\007\105\036\076\041\073\042\077" +
    "\043\106\044\056\001\002\000\024\006\uffbf\010\uffbf\012" +
    "\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\001\002\000\022\007\105\010\uffc7\016\072\036\076\041" +
    "\073\042\077\043\106\044\056\001\002\000\004\010\130" +
    "\001\002\000\012\010\uffc5\013\uffc5\015\111\016\112\001" +
    "\002\000\006\010\uffc8\013\126\001\002\000\020\007\105" +
    "\016\072\036\076\041\073\042\077\043\106\044\056\001" +
    "\002\000\012\010\uffc6\013\uffc6\015\111\016\112\001\002" +
    "\000\024\006\uffc9\010\uffc9\012\uffc9\013\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\001\002\000\004\011\132" +
    "\001\002\000\020\007\105\016\072\036\076\041\073\042" +
    "\077\043\106\044\056\001\002\000\010\012\134\015\111" +
    "\016\112\001\002\000\024\006\uffc2\010\uffc2\012\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\001\002" +
    "\000\020\005\uffda\027\uffda\030\uffda\031\uffda\037\uffda\040" +
    "\uffda\044\uffda\001\002\000\024\006\uffbb\010\uffbb\012\uffbb" +
    "\013\uffbb\015\uffbb\016\uffbb\017\117\020\116\021\115\001" +
    "\002\000\020\005\uffd7\027\uffd7\030\uffd7\031\uffd7\037\uffd7" +
    "\040\uffd7\044\uffd7\001\002\000\020\007\105\016\072\036" +
    "\076\041\073\042\077\043\106\044\056\001\002\000\012" +
    "\010\143\013\142\015\111\016\112\001\002\000\004\041" +
    "\145\001\002\000\004\006\144\001\002\000\020\005\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\037\uffd4\040\uffd4\044\uffd4\001" +
    "\002\000\004\010\146\001\002\000\004\006\147\001\002" +
    "\000\020\005\uffd5\027\uffd5\030\uffd5\031\uffd5\037\uffd5\040" +
    "\uffd5\044\uffd5\001\002\000\034\006\uffb8\007\uffb8\010\uffb8" +
    "\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\001\002\000\020\007\105" +
    "\016\072\036\076\041\073\042\077\043\106\044\056\001" +
    "\002\000\010\012\153\015\111\016\112\001\002\000\034" +
    "\006\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\001\002\000\020\005\uffd2\027\uffd2\030\uffd2\031\uffd2\037" +
    "\uffd2\040\uffd2\044\uffd2\001\002\000\020\007\105\016\072" +
    "\036\076\041\073\042\077\043\106\044\056\001\002\000" +
    "\004\006\161\001\002\000\004\006\160\001\002\000\020" +
    "\005\uffcf\027\uffcf\030\uffcf\031\uffcf\037\uffcf\040\uffcf\044" +
    "\uffcf\001\002\000\020\005\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\037\uffd0\040\uffd0\044\uffd0\001\002\000\010\006\163\015" +
    "\111\016\112\001\002\000\020\005\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\037\uffd1\040\uffd1\044\uffd1\001\002\000\004\044" +
    "\165\001\002\000\036\006\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\001\002\000\004\044\056" +
    "\001\002\000\004\010\170\001\002\000\004\006\171\001" +
    "\002\000\020\005\uffd6\027\uffd6\030\uffd6\031\uffd6\037\uffd6" +
    "\040\uffd6\044\uffd6\001\002\000\010\010\uffe7\011\026\013" +
    "\uffe7\001\002\000\006\010\uffdd\013\uffdd\001\002\000\004" +
    "\044\021\001\002\000\006\010\uffdf\013\uffdf\001\002\000" +
    "\004\007\uffe3\001\002\000\004\044\202\001\002\000\006" +
    "\006\ufff3\013\ufff3\001\002\000\006\006\206\013\205\001" +
    "\002\000\004\022\203\001\002\000\010\041\073\042\077" +
    "\043\106\001\002\000\006\006\ufff2\013\ufff2\001\002\000" +
    "\004\044\202\001\002\000\010\004\ufff5\035\ufff5\044\ufff5" +
    "\001\002\000\006\006\ufff4\013\ufff4\001\002\000\004\004" +
    "\ufffb\001\002\000\004\004\212\001\002\000\010\004\ufff8" +
    "\035\ufff8\044\ufff8\001\002\000\010\004\214\035\015\044" +
    "\021\001\002\000\010\005\uffe5\032\uffe5\044\uffe5\001\002" +
    "\000\010\005\216\032\041\044\021\001\002\000\004\005" +
    "\217\001\002\000\012\004\ufffc\026\ufffc\035\ufffc\044\ufffc" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\036\006\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\006\005\012\007\011\001\001\000\004\006" +
    "\210\001\001\000\012\010\013\011\017\015\021\042\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\176\001\001\000\004\022\033\001\001\000\006\016\023" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\037\037\036\042\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\045\025\043\026\046\042\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\050\001\001\000\006\015\052\042\016" +
    "\001\001\000\004\030\053\001\001\000\002\001\001\000" +
    "\014\027\061\031\062\040\056\041\060\047\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\040\077\041\060\043\073\044\103\045\102\046\074" +
    "\047\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\040\077\041\060\043\073\044\103" +
    "\045\135\047\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\112\001\001\000\004\042\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\117\001\001\000\002\001\001" +
    "\000\020\040\077\041\060\043\073\044\103\045\102\046" +
    "\106\047\100\001\001\000\002\001\001\000\004\032\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\040\077\041\060\043\073\044\103\045\113" +
    "\047\100\001\001\000\004\033\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\040\077" +
    "\041\060\043\073\044\120\047\100\001\001\000\002\001" +
    "\001\000\024\034\122\035\124\040\077\041\060\043\073" +
    "\044\103\045\102\046\123\047\100\001\001\000\002\001" +
    "\001\000\004\032\112\001\001\000\002\001\001\000\020" +
    "\040\077\041\060\043\073\044\103\045\102\046\126\047" +
    "\100\001\001\000\004\032\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\040\077\041\060\043\073\044" +
    "\103\045\102\046\132\047\100\001\001\000\004\032\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\117\001\001\000\002\001\001\000\020\040\077\041\060" +
    "\043\073\044\103\045\102\046\140\047\100\001\001\000" +
    "\004\032\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\040\077\041\060" +
    "\043\073\044\103\045\102\046\151\047\100\001\001\000" +
    "\004\032\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\040\077\041\060\043\073\044\103\045\102\046" +
    "\161\047\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\166\041\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\172\001\001" +
    "\000\002\001\001\000\006\026\174\042\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\200\013\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\203\001\001\000\002\001\001\000\004" +
    "\013\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\212\001\001" +
    "\000\012\010\013\011\017\015\021\042\016\001\001\000" +
    "\004\022\214\001\001\000\010\023\037\037\036\042\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s + " " + s.value.toString());

	return s;

    }


	private boolean errorDetected = false;
	
	public boolean hasError() {
		return errorDetected;
	}
     
    public void report_fatal_error(String message, Object info) throws Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_fatal_error("Fatal error: ", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        System.err.println(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        System.out.println(msg.toString());
    } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ElemAccess ::= 
            {
              ElemAccess RESULT = null;
		 RESULT=new SingularAccess(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*ElemAccess*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ElemAccess ::= LBRACKET Expr RBRACKET 
            {
              ElemAccess RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new ArrayElemAccess(E1); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*ElemAccess*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Designator ::= VarRef ElemAccess 
            {
              Designator RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarRef V1 = (VarRef)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ElemAccess E2 = (ElemAccess)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new Designator(V1, E2); RESULT.setLine(V1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*Designator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VarRef ::= IDENT DBLCOLON IDENT 
            {
              VarRef RESULT = null;
		int nspNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nspNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nspName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new NspVarRef(nspName, varName); RESULT.setLine(nspNameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*VarRef*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VarRef ::= IDENT 
            {
              VarRef RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new BlankVarRef(varName); RESULT.setLine(varNameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*VarRef*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= MINUS Term 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ExprNegTerm(T1); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*Expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Term 
            {
              Expr RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ExprTerm(T1); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*Expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Addop A2 = (Addop)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int T3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int T3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Term T3 = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ExprTermList(E1, A2, T3); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*Expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Term ::= Factor 
            {
              Term RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Factor F1 = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new FactorTerm(F1); RESULT.setLine(F1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*Term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Mulop M2 = (Mulop)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int F3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int F3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Factor F3 = (Factor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new FactorTermList(T1, M2, F3); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*Term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Factor ::= Call 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Call C1 = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new CallFactor(C1); RESULT.setLine(C1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Factor RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new NewArrayFactor(T1, E2); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new GroupedFactor(E1); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Factor ::= Const 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Const C1 = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ConstFactor(C1); RESULT.setLine(C1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*Factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ActParams ::= Expr 
            {
              ActParams RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ActParamsDerived2(E1); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*ActParams*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ActParams ::= ActParams COMMA Expr 
            {
              ActParams RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ActParams A1 = (ActParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ActParamsDerived1(A1, E2); RESULT.setLine(A1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*ActParams*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ActPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new ActParsDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*ActPars*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ActPars ::= ActParams 
            {
              ActPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ActParams A1 = (ActParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ActParsDerived1(A1); RESULT.setLine(A1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*ActPars*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Call ::= Designator LPAREN ActPars RPAREN 
            {
              Call RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ActPars A2 = (ActPars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new Call(D1, A2); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*Call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Mulop ::= PERCENT 
            {
              Mulop RESULT = null;
		 RESULT=new MulopDerived3(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*Mulop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Mulop ::= SLASH 
            {
              Mulop RESULT = null;
		 RESULT=new MulopDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*Mulop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Mulop ::= ASTERISK 
            {
              Mulop RESULT = null;
		 RESULT=new MulopDerived1(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*Mulop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*Addop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopDerived1(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*Addop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DesignatorStatement ::= Designator DEC SEMI 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new DesDecStmt(D1); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DesignatorStatement ::= Designator INC SEMI 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new DesIncStmt(D1); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DesignatorStatement ::= Designator EQUAL Expr SEMI 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new DesAssignStmt(D1, E2); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DesignatorStatement ::= Call SEMI 
            {
              DesignatorStatement RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call C1 = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new DesCallStmt(C1); RESULT.setLine(C1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= DesignatorStatement 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DesignatorStatement D1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new DesStmt(D1); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new PrintStmt(E1); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= PRINT LPAREN Expr COMMA NUM RPAREN SEMI 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int widthleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int widthright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer width = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new PrintWidthStmt(E1, width); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new ReadStmt(D1); RESULT.setLine(D1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= CONTINUE SEMI 
            {
              Statement RESULT = null;
		 RESULT=new ContinueStmt(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= BREAK SEMI 
            {
              Statement RESULT = null;
		 RESULT=new BreakStmt(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= RETURN SEMI 
            {
              Statement RESULT = null;
		 RESULT=new VoidReturnStmt(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= RETURN Expr SEMI 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new ValueReturnStmt(E1); RESULT.setLine(E1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*Statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StmtList ::= 
            {
              StmtList RESULT = null;
		 RESULT=new StmtListDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*StmtList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StmtList ::= StmtList Statement 
            {
              StmtList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList S1 = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new StmtListDerived1(S1, S2); RESULT.setLine(S1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*StmtList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormParam ::= Type IDENT VarQuantity 
            {
              FormParam RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VarQuantity V2 = (VarQuantity)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new FormParam(T1, name, V2); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*FormParam*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormParams ::= FormParam 
            {
              FormParams RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FormParam F1 = (FormParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new FormParamsDerived2(F1); RESULT.setLine(F1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*FormParams*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormParams ::= FormParams COMMA FormParam 
            {
              FormParams RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormParams F1 = (FormParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FormParam F2 = (FormParam)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new FormParamsDerived1(F1, F2); RESULT.setLine(F1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*FormParams*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormPars ::= 
            {
              FormPars RESULT = null;
		 RESULT=new FormParsDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*FormPars*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FormPars ::= FormParams 
            {
              FormPars RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		FormParams F1 = (FormParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new FormParsDerived1(F1); RESULT.setLine(F1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*FormPars*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodSign ::= VOID IDENT 
            {
              MethodSign RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new VoidMethodSign(name); RESULT.setLine(nameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*MethodSign*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodSign ::= Type IDENT 
            {
              MethodSign RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ValueMethodSign(T1, name); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*MethodSign*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDecl ::= MethodSign LPAREN FormPars RPAREN VarTypedDecls LBRACE StmtList RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		MethodSign M1 = (MethodSign)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		FormPars F2 = (FormPars)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		VarTypedDecls V3 = (VarTypedDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList S4 = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDecls ::= 
            {
              MethodDecls RESULT = null;
		 RESULT=new MethodDeclsDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*MethodDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDecls ::= MethodDecls MethodDecl 
            {
              MethodDecls RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecls M1 = (MethodDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new MethodDeclsDerived1(M1, M2); RESULT.setLine(M1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*MethodDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarQuantity ::= 
            {
              VarQuantity RESULT = null;
		 RESULT=new SingularVar(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*VarQuantity*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarQuantity ::= LBRACKET RBRACKET 
            {
              VarQuantity RESULT = null;
		 RESULT=new ArrayVar(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*VarQuantity*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= IDENT VarQuantity 
            {
              VarDecl RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VarQuantity V1 = (VarQuantity)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new VarDecl(name, V1); RESULT.setLine(nameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDecls ::= VarDecl 
            {
              VarDecls RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new VarDeclsDerived2(V1); RESULT.setLine(V1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*VarDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecls ::= VarDecls COMMA VarDecl 
            {
              VarDecls RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDecls V1 = (VarDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new VarDeclsDerived1(V1, V2); RESULT.setLine(V1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*VarDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarTypedDecl ::= Type VarDecls SEMI 
            {
              VarTypedDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecls V2 = (VarDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new VarTypedDecl(T1, V2); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*VarTypedDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarTypedDecls ::= 
            {
              VarTypedDecls RESULT = null;
		 RESULT=new VarTypedDeclsDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*VarTypedDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarTypedDecls ::= VarTypedDecls VarTypedDecl 
            {
              VarTypedDecls RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarTypedDecls V1 = (VarTypedDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VarTypedDecl V2 = (VarTypedDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new VarTypedDeclsDerived1(V1, V2); RESULT.setLine(V1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*VarTypedDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= BOOL 
            {
              Const RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new BoolConst(value); RESULT.setLine(valueleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Const*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= CHAR 
            {
              Const RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new CharConst(value); RESULT.setLine(valueleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Const*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= NUM 
            {
              Const RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new IntConst(value); RESULT.setLine(valueleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*Const*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= IDENT EQUAL Const 
            {
              ConstDecl RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Const C1 = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ConstDecl(name, C1); RESULT.setLine(nameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDecls ::= ConstDecl 
            {
              ConstDecls RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ConstDecl C1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ConstDeclsDerived2(C1); RESULT.setLine(C1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*ConstDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecls ::= ConstDecls COMMA ConstDecl 
            {
              ConstDecls RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ConstDecls C1 = (ConstDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ConstDecl C2 = (ConstDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ConstDeclsDerived1(C1, C2); RESULT.setLine(C1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*ConstDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstTypedDecl ::= CONST Type ConstDecls SEMI 
            {
              ConstTypedDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ConstDecls C2 = (ConstDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new ConstTypedDecl(T1, C2); RESULT.setLine(T1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*ConstTypedDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= VarTypedDecl 
            {
              GlobalDecl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VarTypedDecl V1 = (VarTypedDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new GlobalVarDecl(V1); RESULT.setLine(V1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= ConstTypedDecl 
            {
              GlobalDecl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ConstTypedDecl C1 = (ConstTypedDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new GlobalConstDecl(C1); RESULT.setLine(C1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecls ::= 
            {
              GlobalDecls RESULT = null;
		 RESULT=new GlobalDeclsDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              GlobalDecls RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		GlobalDecls G1 = (GlobalDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int G2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int G2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		GlobalDecl G2 = (GlobalDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new GlobalDeclsDerived1(G1, G2); RESULT.setLine(G1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= IDENT 
            {
              Type RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new Type(name); RESULT.setLine(nameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*Type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NspName ::= IDENT 
            {
              NspName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new NspName(name); RESULT.setLine(nameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*NspName*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NspDecl ::= NAMESPACE NspName LBRACE GlobalDecls LBRACE MethodDecls RBRACE RBRACE 
            {
              NspDecl RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		NspName N1 = (NspName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int G2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int G2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		GlobalDecls G2 = (GlobalDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MethodDecls M3 = (MethodDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new NspDecl(N1, G2, M3); RESULT.setLine(N1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*NspDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NspDecls ::= 
            {
              NspDecls RESULT = null;
		 RESULT=new NspDeclsDerived2(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*NspDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NspDecls ::= NspDecls NspDecl 
            {
              NspDecls RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NspDecls N1 = (NspDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		NspDecl N2 = (NspDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new NspDeclsDerived1(N1, N2); RESULT.setLine(N1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*NspDecls*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=new ProgName(name); RESULT.setLine(nameleft); 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*ProgName*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgName NspDecls GlobalDecls LBRACE MethodDecls RBRACE 
            {
              Program RESULT = null;
		int P1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ProgName P1 = (ProgName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NspDecls N2 = (NspDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int G3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int G3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		GlobalDecls G3 = (GlobalDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int M4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int M4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecls M4 = (MethodDecls)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new Program(P1, N2, G3, M4); RESULT.setLine(P1left); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

