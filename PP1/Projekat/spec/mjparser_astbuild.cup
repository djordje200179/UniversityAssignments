package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:
	private boolean errorDetected = false;
	
	public boolean hasError() {
		return errorDetected;
	}
     
    public void report_fatal_error(String message, Object info) throws Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Syntax error: ", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_fatal_error("Fatal error: ", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        System.err.println(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left);
        System.out.println(msg.toString());
    } 
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s + " " + s.value.toString());

	return s;
:}


terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal COMMA, DBLCOLON;
terminal PLUS, MINUS, ASTERISK, SLASH, PERCENT, EQUAL, INC, DEC;
terminal DBL_EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal PROGRAM, NAMESPACE, PRINT, READ, VOID, CONST, NEW;
terminal RETURN, IF, ELSE, FOR, BREAK, CONTINUE;

terminal Integer NUM;
terminal Boolean BOOL;
terminal Character CHAR;
terminal String IDENT;

nonterminal Program Program;
nonterminal NspDecls NspDecls;
nonterminal NspDecl NspDecl;
nonterminal NspName NspName;
nonterminal GlobalDecls GlobalDecls;
nonterminal GlobalDecl GlobalDecl;
nonterminal ConstTypedDecl ConstTypedDecl;
nonterminal ConstDecls ConstDecls;
nonterminal ConstDecl ConstDecl;
nonterminal VarTypedDecls VarTypedDecls;
nonterminal VarTypedDecl VarTypedDecl;
nonterminal VarDecls VarDecls;
nonterminal VarDecl VarDecl;
nonterminal ElemAccess ElemAccess;
nonterminal VarQuantity VarQuantity;
nonterminal MethodDecls MethodDecls;
nonterminal MethodDecl MethodDecl;
nonterminal FormPars FormPars;
nonterminal FormParams FormParams;
nonterminal FormParam FormParam;
nonterminal Statement Statement;
nonterminal StmtList StmtList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesStmtList DesStmtList;
nonterminal DesUnpackList DesUnpackList;
nonterminal DesOpt DesOpt;
nonterminal IfBeforeCond IfBeforeCond;
nonterminal IfAfterCond IfAfterCond;
nonterminal IfElseStart IfElseStart;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Relop Relop;
nonterminal ActPars ActPars;
nonterminal ActParams ActParams;
nonterminal CondFact CondFact;
nonterminal CondTerm CondTerm;
nonterminal Condition Condition;
nonterminal ConditionTry ConditionTry;
nonterminal CondOrJoiner CondOrJoiner;
nonterminal ForSign ForSign;
nonterminal ForCond ForCond;
nonterminal ForDesStmtList ForDesStmtList;
nonterminal ForBeforeCond ForBeforeCond;
nonterminal ForAfterCond ForAfterCond;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, MethodSign, Designator, VarRef;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Const, Factor, Term, Expr, Call, CallBefore, ActParam;

precedence left ELSE;

Program 	::= (Program) PROGRAM ProgName:P1 NspDecls:N2 GlobalDecls:G3 LBRACE MethodDecls:M4 RBRACE {: RESULT=new Program(P1, N2, G3, M4); RESULT.setLine(P1left); :};
ProgName	::= (ProgName) IDENT:name {: RESULT=new ProgName(name); RESULT.setLine(nameleft); :};

NspDecls    ::= NspDecls:N1 NspDecl:N2 {: RESULT=new NspDeclsDerived1(N1, N2); RESULT.setLine(N1left); :}
			  | {: RESULT=new NspDeclsDerived2(); :} /* epsilon */;
NspDecl     ::= (NspDecl) NAMESPACE NspName:N1 LBRACE GlobalDecls:G2 LBRACE MethodDecls:M3 RBRACE RBRACE {: RESULT=new NspDecl(N1, G2, M3); RESULT.setLine(N1left); :};
NspName     ::= (NspName) IDENT:name {: RESULT=new NspName(name); RESULT.setLine(nameleft); :};

Type    ::= (Type) IDENT:name {: RESULT=new Type(name); RESULT.setLine(nameleft); :};

GlobalDecls	::= GlobalDecls:G1 GlobalDecl:G2 {: RESULT=new GlobalDeclsDerived1(G1, G2); RESULT.setLine(G1left); :}
			  | {: RESULT=new GlobalDeclsDerived2(); :} /* epsilon */;
GlobalDecl	::= (GlobalConstDecl) ConstTypedDecl:C1 {: RESULT=new GlobalConstDecl(C1); RESULT.setLine(C1left); :}
			  | (GlobalVarDecl) VarTypedDecl:V1 {: RESULT=new GlobalVarDecl(V1); RESULT.setLine(V1left); :};

ConstTypedDecl	::= (ConstTypedDecl) CONST Type:T1 ConstDecls:C2 SEMI {: RESULT=new ConstTypedDecl(T1, C2); RESULT.setLine(T1left); :};
ConstDecls		::= ConstDecls:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDeclsDerived1(C1, C2); RESULT.setLine(C1left); :}
				  | ConstDecl:C1 {: RESULT=new ConstDeclsDerived2(C1); RESULT.setLine(C1left); :};
ConstDecl		::= (ConstDecl) IDENT:name EQUAL Const:C1 {: RESULT=new ConstDecl(name, C1); RESULT.setLine(nameleft); :};
Const			::= (IntConst) NUM:value {: RESULT=new IntConst(value); RESULT.setLine(valueleft); :}
	   			  | (CharConst) CHAR:value {: RESULT=new CharConst(value); RESULT.setLine(valueleft); :}
				  | (BoolConst) BOOL:value {: RESULT=new BoolConst(value); RESULT.setLine(valueleft); :};

VarTypedDecls	::= VarTypedDecls:V1 VarTypedDecl:V2 {: RESULT=new VarTypedDeclsDerived1(V1, V2); RESULT.setLine(V1left); :}
			  	  | {: RESULT=new VarTypedDeclsDerived2(); :} /* epsilon */;
VarTypedDecl	::= (VarTypedDecl) Type:T1 VarDecls:V2 SEMI {: RESULT=new VarTypedDecl(T1, V2); RESULT.setLine(T1left); :};
VarDecls		::= VarDecls:V1 COMMA VarDecl:V2 {: RESULT=new VarDeclsDerived1(V1, V2); RESULT.setLine(V1left); :}
				  | VarDecl:V1 {: RESULT=new VarDeclsDerived2(V1); RESULT.setLine(V1left); :};
VarDecl			::= (VarDeclOk) IDENT:name VarQuantity:V1 {: RESULT=new VarDeclOk(name, V1); RESULT.setLine(nameleft); :}
				  | error {: parser.report_error("Variable declaration is not valid", null); :} {: RESULT=new VarDeclDerived1(); :};
VarQuantity     ::= (ArrayVar) LBRACKET RBRACKET {: RESULT=new ArrayVar(); :}
				  | (SingularVar) {: RESULT=new SingularVar(); :} /* epsilon */;

MethodDecls	::= MethodDecls:M1 MethodDecl:M2 {: RESULT=new MethodDeclsDerived1(M1, M2); RESULT.setLine(M1left); :}
			  | {: RESULT=new MethodDeclsDerived2(); :} /* epsilon */;
MethodDecl	::= (MethodDecl) MethodSign:M1 LPAREN FormPars:F2 RPAREN VarTypedDecls:V3 LBRACE StmtList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};
MethodSign	::= (ValueMethodSign) Type:T1 IDENT:name {: RESULT=new ValueMethodSign(T1, name); RESULT.setLine(T1left); :}
			  | (VoidMethodSign) VOID IDENT:name {: RESULT=new VoidMethodSign(name); RESULT.setLine(nameleft); :};

FormPars	::= FormParams:F1 {: RESULT=new FormParsDerived1(F1); RESULT.setLine(F1left); :}
			  | {: RESULT=new FormParsDerived2(); :} /* epsilon */;
FormParams	::= FormParams:F1 COMMA FormParam:F2 {: RESULT=new FormParamsDerived1(F1, F2); RESULT.setLine(F1left); :}
			  | FormParam:F1 {: RESULT=new FormParamsDerived2(F1); RESULT.setLine(F1left); :};
FormParam	::= (FormParamOk) Type:T1 IDENT:name VarQuantity:V2 {: RESULT=new FormParamOk(T1, name, V2); RESULT.setLine(T1left); :}
			  | error {: parser.report_error("Formal parameter is not valid", null); :} {: RESULT=new FormParamDerived1(); :};

StmtList    ::= StmtList:S1 Statement:S2 {: RESULT=new StmtListDerived1(S1, S2); RESULT.setLine(S1left); :}
			  | {: RESULT=new StmtListDerived2(); :} /* epsilon */;
Statement   ::= (ValueReturnStmt) RETURN Expr:E1 SEMI {: RESULT=new ValueReturnStmt(E1); RESULT.setLine(E1left); :}
			  | (VoidReturnStmt) RETURN SEMI {: RESULT=new VoidReturnStmt(); :}
			  | (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			  | (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			  | (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  | (PrintWidthStmt) PRINT LPAREN Expr:E1 COMMA NUM:width RPAREN SEMI {: RESULT=new PrintWidthStmt(E1, width); RESULT.setLine(E1left); :}
			  | (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			  | (DesStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesStmt(D1); RESULT.setLine(D1left); :}
			  | (IfElseStmt) IF LPAREN IfBeforeCond:I1 ConditionTry:C2 IfAfterCond:I3 RPAREN Statement:S4 ELSE IfElseStart:I5 Statement:S6 {: RESULT=new IfElseStmt(I1, C2, I3, S4, I5, S6); RESULT.setLine(I1left); :}
			  | (IfStmt) IF LPAREN IfBeforeCond:I1 ConditionTry:C2 IfAfterCond:I3 RPAREN Statement:S4 {: RESULT=new IfStmt(I1, C2, I3, S4); RESULT.setLine(I1left); :}
			  | (ForStmt) ForSign:F1 Statement:S2 {: RESULT=new ForStmt(F1, S2); RESULT.setLine(F1left); :}
			  | LBRACE StmtList:S1 RBRACE {: RESULT=new StatementDerived1(S1); RESULT.setLine(S1left); :};

IfBeforeCond    ::= (IfBeforeCond) {: RESULT=new IfBeforeCond(); :} /* epsilon */;
IfAfterCond     ::= (IfAfterCond) {: RESULT=new IfAfterCond(); :} /* epsilon */;
IfElseStart     ::= (IfElseStart) {: RESULT=new IfElseStart(); :} /* epsilon */;

ForSign         ::= (ForSign) FOR LPAREN ForDesStmtList:F1 SEMI ForBeforeCond:F2 ForCond:F3 ForAfterCond:F4 SEMI ForDesStmtList:F5 RPAREN {: RESULT=new ForSign(F1, F2, F3, F4, F5); RESULT.setLine(F1left); :};
ForBeforeCond   ::= (ForBeforeCond) {: RESULT=new ForBeforeCond(); :} /* epsilon */;
ForAfterCond    ::= (ForAfterCond) {: RESULT=new ForAfterCond(); :} /* epsilon */;
ForCond         ::= (FiniteFor) Condition:C1 {: RESULT=new FiniteFor(C1); RESULT.setLine(C1left); :}
				  | (InfiniteFor) {: RESULT=new InfiniteFor(); :} /* epsilon */;
ForDesStmtList  ::= DesStmtList:D1 {: RESULT=new ForDesStmtListDerived1(D1); RESULT.setLine(D1left); :}
				  | {: RESULT=new ForDesStmtListDerived2(); :} /* epsilon */;

DesStmtList ::= DesStmtList:D1 COMMA DesignatorStatement:D2 {: RESULT=new DesStmtListDerived1(D1, D2); RESULT.setLine(D1left); :}
			  | DesignatorStatement:D1 {: RESULT=new DesStmtListDerived2(D1); RESULT.setLine(D1left); :};

DesignatorStatement ::= (DesCallStmt) Call:C1 {: RESULT=new DesCallStmt(C1); RESULT.setLine(C1left); :}
					  | (DesAssignStmt) Designator:D1 EQUAL Expr:E2 {: RESULT=new DesAssignStmt(D1, E2); RESULT.setLine(D1left); :}
					  | Designator:D1 EQUAL error {: parser.report_error("Assignment expression is not valid", null); :} {: RESULT=new DesignatorStatementDerived1(D1); RESULT.setLine(D1left); :}
					  | (DesIncStmt) Designator:D1 INC {: RESULT=new DesIncStmt(D1); RESULT.setLine(D1left); :}
					  | (DesDecStmt) Designator:D1 DEC {: RESULT=new DesDecStmt(D1); RESULT.setLine(D1left); :}
					  | (DesUnpackStmt) LBRACKET DesUnpackList:D1 ASTERISK Designator:D2 RBRACKET EQUAL Designator:D3 {: RESULT=new DesUnpackStmt(D1, D2, D3); RESULT.setLine(D1left); :};

DesUnpackList  ::= DesUnpackList:D1 COMMA DesOpt:D2 {: RESULT=new DesUnpackListDerived1(D1, D2); RESULT.setLine(D1left); :}
				 | DesOpt:D1 {: RESULT=new DesUnpackListDerived2(D1); RESULT.setLine(D1left); :};

DesOpt  ::= (DesOptDes) Designator:D1 {: RESULT=new DesOptDes(D1); RESULT.setLine(D1left); :}
		  | (DesOptEmpty) {: RESULT=new DesOptEmpty(); :} /* epsilon */;

Addop   ::= (PlusAddOp) PLUS {: RESULT=new PlusAddOp(); :}
          | (MinusAddOp) MINUS {: RESULT=new MinusAddOp(); :};
Mulop   ::= (AsteriskMulop) ASTERISK {: RESULT=new AsteriskMulop(); :}
		  |	(SlashMulop) SLASH {: RESULT=new SlashMulop(); :}
		  |	(PercentMulop) PERCENT {: RESULT=new PercentMulop(); :};
Relop   ::= (EqualityRelop) DBL_EQUAL {: RESULT=new EqualityRelop(); :}
          | (InequalityRelop) NOT_EQUAL {: RESULT=new InequalityRelop(); :}
          | (GreaterRelop) GREATER {: RESULT=new GreaterRelop(); :}
          | (GreaterEqualRelop) GREATER_EQUAL {: RESULT=new GreaterEqualRelop(); :}
          | (LessRelop) LESS {: RESULT=new LessRelop(); :}
          | (LessEqualRelop) LESS_EQUAL {: RESULT=new LessEqualRelop(); :};

Call        ::= (Call) Designator:D1 CallBefore:C2 LPAREN ActPars:A3 RPAREN {: RESULT=new Call(D1, C2, A3); RESULT.setLine(D1left); :};
CallBefore  ::= (CallBefore) {: RESULT=new CallBefore(); :} /* epsilon */;

ActPars     ::= ActParams:A1 {: RESULT=new ActParsDerived1(A1); RESULT.setLine(A1left); :}
		      | {: RESULT=new ActParsDerived2(); :} /* epsilon */;
ActParams   ::= ActParams:A1 COMMA ActParam:A2 {: RESULT=new ActParamsDerived1(A1, A2); RESULT.setLine(A1left); :}
		      | ActParam:A1 {: RESULT=new ActParamsDerived2(A1); RESULT.setLine(A1left); :};
ActParam    ::= (ActParam) Expr:E1 {: RESULT=new ActParam(E1); RESULT.setLine(E1left); :};

Factor ::= (ConstFactor) Const:C1 {: RESULT=new ConstFactor(C1); RESULT.setLine(C1left); :}
		 | (GroupedFactor) LPAREN Expr:E1 RPAREN {: RESULT=new GroupedFactor(E1); RESULT.setLine(E1left); :}
		 | (NewArrayFactor) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewArrayFactor(T1, E2); RESULT.setLine(T1left); :}
		 | (CallFactor) Call:C1 {: RESULT=new CallFactor(C1); RESULT.setLine(C1left); :}
		 | (DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :};


Term ::= (FactorTermList) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new FactorTermList(T1, M2, F3); RESULT.setLine(T1left); :}
	   | (FactorTerm) Factor:F1 {: RESULT=new FactorTerm(F1); RESULT.setLine(F1left); :};

Expr ::= (ExprTermList) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprTermList(E1, A2, T3); RESULT.setLine(E1left); :}
	   | (ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
	   | (ExprNegTerm) MINUS Term:T1 {: RESULT=new ExprNegTerm(T1); RESULT.setLine(T1left); :};

VarRef      ::= (BlankVarRef) IDENT:varName {: RESULT=new BlankVarRef(varName); RESULT.setLine(varNameleft); :}
			  | (NspVarRef) IDENT:nspName DBLCOLON IDENT:varName {: RESULT=new NspVarRef(nspName, varName); RESULT.setLine(nspNameleft); :};
Designator  ::= (Designator) VarRef:V1 ElemAccess:E2 {: RESULT=new Designator(V1, E2); RESULT.setLine(V1left); :};
ElemAccess  ::= (ArrayElemAccess) LBRACKET Expr:E1 RBRACKET {: RESULT=new ArrayElemAccess(E1); RESULT.setLine(E1left); :}
			  | (SingularAccess) {: RESULT=new SingularAccess(); :} /* epsilon */;

CondFact    ::= (Comparison) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new Comparison(E1, R2, E3); RESULT.setLine(E1left); :}
			  | (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :};

CondTerm    ::= (CondTermList) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermList(C1, C2); RESULT.setLine(C1left); :}
			  | (CondFactTerm) CondFact:C1 {: RESULT=new CondFactTerm(C1); RESULT.setLine(C1left); :};

ConditionTry    ::= (ConditionOk) Condition:C1 {: RESULT=new ConditionOk(C1); RESULT.setLine(C1left); :}
				  | error {: parser.report_error("Condition in IF statement is not valid", null); :} {: RESULT=new ConditionTryDerived1(); :};

Condition   ::= (ConditionList) Condition:C1 CondOrJoiner:C2 CondTerm:C3 {: RESULT=new ConditionList(C1, C2, C3); RESULT.setLine(C1left); :}
			  | (CondTermCondition) CondTerm:C1 {: RESULT=new CondTermCondition(C1); RESULT.setLine(C1left); :};

CondOrJoiner ::= (CondOrJoiner) OR {: RESULT=new CondOrJoiner(); :};